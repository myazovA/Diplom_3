{"name": "Открытие окна Детали заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7DEF2EEA2+31554]\n\t(No symbol) [0x00007FF7DEEA7ED9]\n\t(No symbol) [0x00007FF7DED68559]\n\t(No symbol) [0x00007FF7DED50C81]\n\t(No symbol) [0x00007FF7DED4EC6D]\n\t(No symbol) [0x00007FF7DED4F47F]\n\t(No symbol) [0x00007FF7DED5E25E]\n\t(No symbol) [0x00007FF7DED76A04]\n\t(No symbol) [0x00007FF7DEDFCAA4]\n\t(No symbol) [0x00007FF7DEDDCDD3]\n\t(No symbol) [0x00007FF7DEDAA33B]\n\t(No symbol) [0x00007FF7DEDAAED1]\n\tGetHandleVerifier [0x00007FF7DF238B1D+3217341]\n\tGetHandleVerifier [0x00007FF7DF285AE3+3532675]\n\tGetHandleVerifier [0x00007FF7DF27B0E0+3489152]\n\tGetHandleVerifier [0x00007FF7DEFDE776+750614]\n\t(No symbol) [0x00007FF7DEEB375F]\n\t(No symbol) [0x00007FF7DEEAEB14]\n\t(No symbol) [0x00007FF7DEEAECA2]\n\t(No symbol) [0x00007FF7DEE9E16F]\n\tBaseThreadInitThunk [0x00007FFE67AC53E0+16]\n\tRtlUserThreadStart [0x00007FFE6890485B+43]", "trace": "self = <tests.test_orders_page.TestOrdersPage object at 0x000002CEE06F6370>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b32a06cc4bccb89590dd6f1ba589ead4\")>\n\n    @allure.title('Открытие окна Детали заказа')\n    def test_open_order_details_opens(self, driver):\n        main_page = MainPage(driver)\n        order_page = OrderPage(driver)\n    \n>       main_page.click_orders_button()\n\ntests\\test_orders_page.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\main_page.py:19: in click_orders_button\n    self.check_element_is_clickable(MainPageLocators.button_orders)\npage_objects\\base_page.py:49: in check_element_is_clickable\n    return WebDriverWait(self.driver, 15).until(expected_conditions.element_to_be_clickable(locator))\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CEE0821220>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached\\\\n  (failed to ch...07FF7DEE9E16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE67AC53E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FFE6890485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7DEF2EEA2+31554]\nE       \t(No symbol) [0x00007FF7DEEA7ED9]\nE       \t(No symbol) [0x00007FF7DED68559]\nE       \t(No symbol) [0x00007FF7DED50C81]\nE       \t(No symbol) [0x00007FF7DED4EC6D]\nE       \t(No symbol) [0x00007FF7DED4F47F]\nE       \t(No symbol) [0x00007FF7DED5E25E]\nE       \t(No symbol) [0x00007FF7DED76A04]\nE       \t(No symbol) [0x00007FF7DEDFCAA4]\nE       \t(No symbol) [0x00007FF7DEDDCDD3]\nE       \t(No symbol) [0x00007FF7DEDAA33B]\nE       \t(No symbol) [0x00007FF7DEDAAED1]\nE       \tGetHandleVerifier [0x00007FF7DF238B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF7DF285AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF7DF27B0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF7DEFDE776+750614]\nE       \t(No symbol) [0x00007FF7DEEB375F]\nE       \t(No symbol) [0x00007FF7DEEAEB14]\nE       \t(No symbol) [0x00007FF7DEEAECA2]\nE       \t(No symbol) [0x00007FF7DEE9E16F]\nE       \tBaseThreadInitThunk [0x00007FFE67AC53E0+16]\nE       \tRtlUserThreadStart [0x00007FFE6890485B+43]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "steps": [{"name": "Переход к \"Ленте заказов\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7DEF2EEA2+31554]\n\t(No symbol) [0x00007FF7DEEA7ED9]\n\t(No symbol) [0x00007FF7DED68559]\n\t(No symbol) [0x00007FF7DED50C81]\n\t(No symbol) [0x00007FF7DED4EC6D]\n\t(No symbol) [0x00007FF7DED4F47F]\n\t(No symbol) [0x00007FF7DED5E25E]\n\t(No symbol) [0x00007FF7DED76A04]\n\t(No symbol) [0x00007FF7DEDFCAA4]\n\t(No symbol) [0x00007FF7DEDDCDD3]\n\t(No symbol) [0x00007FF7DEDAA33B]\n\t(No symbol) [0x00007FF7DEDAAED1]\n\tGetHandleVerifier [0x00007FF7DF238B1D+3217341]\n\tGetHandleVerifier [0x00007FF7DF285AE3+3532675]\n\tGetHandleVerifier [0x00007FF7DF27B0E0+3489152]\n\tGetHandleVerifier [0x00007FF7DEFDE776+750614]\n\t(No symbol) [0x00007FF7DEEB375F]\n\t(No symbol) [0x00007FF7DEEAEB14]\n\t(No symbol) [0x00007FF7DEEAECA2]\n\t(No symbol) [0x00007FF7DEE9E16F]\n\tBaseThreadInitThunk [0x00007FFE67AC53E0+16]\n\tRtlUserThreadStart [0x00007FFE6890485B+43]\n\n", "trace": "  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Diplom_3\\page_objects\\main_page.py\", line 19, in click_orders_button\n    self.check_element_is_clickable(MainPageLocators.button_orders)\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Diplom_3\\page_objects\\base_page.py\", line 49, in check_element_is_clickable\n    return WebDriverWait(self.driver, 15).until(expected_conditions.element_to_be_clickable(locator))\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 363, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Проверить кликабельность элемента", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7DEF2EEA2+31554]\n\t(No symbol) [0x00007FF7DEEA7ED9]\n\t(No symbol) [0x00007FF7DED68559]\n\t(No symbol) [0x00007FF7DED50C81]\n\t(No symbol) [0x00007FF7DED4EC6D]\n\t(No symbol) [0x00007FF7DED4F47F]\n\t(No symbol) [0x00007FF7DED5E25E]\n\t(No symbol) [0x00007FF7DED76A04]\n\t(No symbol) [0x00007FF7DEDFCAA4]\n\t(No symbol) [0x00007FF7DEDDCDD3]\n\t(No symbol) [0x00007FF7DEDAA33B]\n\t(No symbol) [0x00007FF7DEDAAED1]\n\tGetHandleVerifier [0x00007FF7DF238B1D+3217341]\n\tGetHandleVerifier [0x00007FF7DF285AE3+3532675]\n\tGetHandleVerifier [0x00007FF7DF27B0E0+3489152]\n\tGetHandleVerifier [0x00007FF7DEFDE776+750614]\n\t(No symbol) [0x00007FF7DEEB375F]\n\t(No symbol) [0x00007FF7DEEAEB14]\n\t(No symbol) [0x00007FF7DEEAECA2]\n\t(No symbol) [0x00007FF7DEE9E16F]\n\tBaseThreadInitThunk [0x00007FFE67AC53E0+16]\n\tRtlUserThreadStart [0x00007FFE6890485B+43]\n\n", "trace": "  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Diplom_3\\page_objects\\base_page.py\", line 49, in check_element_is_clickable\n    return WebDriverWait(self.driver, 15).until(expected_conditions.element_to_be_clickable(locator))\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 363, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Diplom_3\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "locator", "value": "('xpath', '//p[text()=\"Лента Заказов\"]/parent::a/parent::li')"}], "start": 1719792928885, "stop": 1719792929330}], "start": 1719792928885, "stop": 1719792929333}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1719792928885, "stop": 1719792929334, "uuid": "8ee14ae6-b604-420c-9305-ae2296b1744f", "historyId": "b48b1c5ec4ab4ddd8a3e0b4a30a42952", "testCaseId": "0aba3e9d773dbe765539d650568dbb7c", "fullName": "tests.test_orders_page.TestOrdersPage#test_open_order_details_opens", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders_page"}, {"name": "subSuite", "value": "TestOrdersPage"}, {"name": "host", "value": "Rayless"}, {"name": "thread", "value": "14104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders_page"}]}